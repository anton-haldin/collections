#### Qubell OpenShift example implementation ####
#### OpenShift Service ####
application:
# Input Configuration parameters.
# In this section you can set input configuration parameters which you
# will be able to change later in reconfiguration
  configuration:
    input.apihost: "openshift.redhat.com"
    input.defaultdomain: "eil397"
    configuration.imageId:    "ami-246ed34c"
    configuration.hardwareId: "t1.micro"
    configuration.locationId: "us-east-1"
    configuration.login:      "ec2-user"
    configuration.group: "default"
# Root Application Interfaces.
# Here we describe a interfaces with pins and their bindings on components interfaces
# For binding using function bind(Component1#interface.pin, Component2#interface.pin)
  interfaces:
    configuration:
      imageId:         bind(compute#configuration.imageId)
      hardwareId:      bind(compute#configuration.hardwareId)
      locationId:      bind(compute#configuration.locationId)
      login:           bind(compute#configuration.login)
      group:           bind(compute#configuration.group)
    input: ###Input values we want to manage from the root application
      apihost: "bind(workflow#input.apihost)"
      defaultdomain: "bind(workflow#input.defaultdomain)"
    app-meta:
      application-pic: "bind(metadata#output.application-pic)"
    openshift:
      create-app: "bind(workflow#actions.create-app)"
      deploy-app: "bind(workflow#actions.deploy-app)"
      deployWarContext-app: "bind(workflow#actions.deployWarContext-app)"
      delete-app: "bind(workflow#actions.delete-app)"
 ####### Components definitions ########

  components:
    metadata:
      type: cobalt.common.Constants
      interfaces:
        output:
          application-pic:
            type: publish-signal(map<string, object>)
            name: ""
      configuration:
        configuration.values:
          output.application-pic:
            large: "http://upload.wikimedia.org/wikipedia/en/thumb/3/3a/OpenShift-LogoType.svg/432px-OpenShift-LogoType.svg.png"
            small: "http://upload.wikimedia.org/wikipedia/en/thumb/3/3a/OpenShift-LogoType.svg/200px-OpenShift-LogoType.svg.png"
            small-height: 80
    compute:
      type: compute.Instance
####  Component workflow ####
    workflow:
      type: workflow.Instance ### It's a  component type  to run imperative workflow
      interfaces: # Each component have interfaces wit pins
        compute:
          networks: consume-signal(map<string, map<string, string>>)
          exec:     send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:   send-command(string filename, bytes payload)
          get-file:   send-command(string filename => bytes payload) 
        credentials:
          password_openshift: consume-signal(string)  
          login_openshift: consume-signal(string)
          apihost_openshift: consume-signal(string) 
          username_git: consume-signal(string)
          useremail_git: consume-signal(string)   
        input: # Contain pins with type: configuration().This type using for configuration parameters
          apihost: 
            type: configuration(string)
            name: Apihost
          defaultdomain: 
            type: configuration(string)
            name: Defaultdomain
        actions:
          create-app:
             type: receive-command(string name, string git-uri, string app-branch => list<string> context)
             name: Create Application
          deploy-app:
             type: receive-command(string name, string url_with_context => string status)
             name: Deploy Application
          deployWarContext-app:
             type: receive-command(string name, string bucket_url_with_war, string bucket_url_with_context => string status)
             name: Deploy Application with War and Context
          delete-app:
             type: receive-command(string name => string status)
             name: Delete application
        result:
          status:
             type: publish-signal(string)
             name: Status
      required:
      - compute
      - credentials
      configuration:
        configuration.workflows:

          init: &init # main workflow used for init phase
            steps:
              get-env-props:
                action: getSignals
                output:
                  props: result

              getContext:
                action: getInstanceContext
                precedingPhases: [ get-env-props ]
                output:
                  instanceId: instanceId
                  instanceName: instanceName

              initFirstStep:
                action: execrun
                precedingPhases: [ getContext ]
                parameters:
                  roles: [ compute ]
                  isSudo: true
                  command: 
                  - bash -exc
                  - |
                      yum install -y git
                      yum install -y gem
                      gem install rhc
                      echo "  StrictHostKeyChecking no" >> /etc/ssh/ssh_config 
                output:
                  clientKey: stdout
              initSecondStep:
                action: execrun
                precedingPhases: [ initFirstStep ]
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command: 
                  - bash -exc
                  - |
                      echo -e "yes\nkey{$.instanceId}" | /usr/local/bin/rhc setup --server openshift.redhat.com -l {$.props.credentials.login_openshift} -p {$.props.credentials.password_openshift} --create-token
                      mkdir $${{HOME}}/.openshift_service
                output:
                  clientKey2: stdout
              initGit:
                action: execrun
                precedingPhases: [ initSecondStep ]
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command: 
                  - bash -exc
                  - |
                      git config --global user.name "{$.props.credentials.username_git}"
                      git config --global user.email {$.props.credentials.useremail_git}
                output:
                  outPutGitInit: stdout
            return: ### Values returned from workflow
              status:
                value: "status Ok"

          launch: *init

          create-app: ### Additional workflow to create application in openshift and return  list of endpoints
            steps:
              createApp:
                action: execrun
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                       /usr/local/bin/rhc app-show {$.name} || echo -e "yes\n" | /usr/local/bin/rhc app-create {$.name} tomcat6 > $${{HOME}}/.openshift_service/{$.name} 2> /tmp/error;
                       if [ $? -eq 0 ]; then echo '{ result: "Ok"}';else echo '{ result: "Not ok"}';fi;
                output:
                  context: stdout
              getGitUri:
                action: execrun
                precedingPhases: [ createApp ]
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                      cat $${{HOME}}/.openshift_service/{$.name} | grep "Git" | cut -d":" -f2-
                output:
                  getUriExec: stdout
              getURL:
                action: execrun
                precedingPhases: [ createApp ]
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                      cat $${{HOME}}/.openshift_service/{$.name} | grep "URL" | cut -d":" -f2-
                output:
                  getUrlExec: stdout
              getSSH:
                action: execrun
                precedingPhases: [ createApp ]
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                      cat $${{HOME}}/.openshift_service/{$.name}  | grep "SSH" | cut -d":" -f2-
                output:
                  getSshExec: stdout
              getAppId:
                action: execrun
                precedingPhases: [ createApp ]
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                      cat $${{HOME}}/.openshift_service/{$.name}  | grep "SSH" | cut -d":" -f2- | cut -d'@' -f1
                output:
                  getAppIdExec: stdout
              getFqdn:
                action: execrun
                precedingPhases: [ createApp ]
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                      cat $${{HOME}}/.openshift_service/{$.name}  | grep "URL" | cut -d":" -f2- | cut -d'@' -f1 | cut -d'/' -f3
                output:
                  getFqdn: stdout
              checkFqdn:
                action: execrun
                precedingPhases: [ getFqdn ]
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                      while true; do sleep 1;ping -c1 {$.getFqdn[*][0]}  || continue;break ;done;
                output:
                  checkFqdn: stdout
            return: ### Values returned from workflow
              context:
                value:
                 - "{$.getFqdn[*][0]}"
                 - "{$.getUrlExec[*][0]}"
                 - "{$.getUriExec[*][0]}" 
                 - "{$.getSshExec[*][0]}"
                 - "{$.getAppIdExec[*][0]}"
          deploy-app: ### Additional workflow to  deploy application in Openshift by using git 
            steps:
              getContext:
                action: getInstanceContext
                output:
                  instanceId: instanceId
                  instanceName: instanceName
              getGitUri:
                action: execrun
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                      /usr/local/bin/rhc app-show -a {$.name} | grep "Git" | cut -d":" -f2-
                output:
                  execRunOutput: stdout
              cloneRepo:
                action: execrun
                precedingPhases: [ getGitUri, getContext ]
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                      if [ -d $${{HOME}}/{$.name} ]; then rm -Rf {$.name};fi;
                      git clone `/usr/local/bin/rhc app-show -a {$.name} | grep "Git" | cut -d":" -f2-` $${{HOME}}/{$.name}
                      /usr/local/bin/rhc app-show -a {$.name} | grep "Git" | cut -d":" -f2-
                output:
                  execRunOutput2: stdout
              deployApp2:
                  action: execrun
                  precedingPhases: [ cloneRepo ]
                  parameters:
                    roles: [ compute ]
                    isSudo: false
                    command:
                    - bash -exc
                    - |
                        cd $${{HOME}}/{$.name}
                        git remote add upstream -m master git://github.com/qubell/starter-java-web.git
                        git pull -q -s recursive -X theirs upstream master
                        wget -O .openshift/config/context.xml http://storage.googleapis.com/petclinic/context.xml
                        echo "{$.instanceId} `date`" > deployment
                        git add .
                        git commit -m "deployment " 
                        git push
                        rm -Rf $${{HOME}}/{$.name}
                  output:
                    execRunOutput3: stdout 
            return: ### Values returned from workflow
              status:
                value: "contextStringOne"
          deployWarContext-app: ### Additional workflow to deploy application in openshift with urls on war artefacts and context.xml
            steps:
              getContext:
                action: getInstanceContext
                output:
                  instanceId: instanceId
                  instanceName: instanceName
              getGitUri:
                action: execrun
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                      /usr/local/bin/rhc app-show -a {$.name} | grep "Git" | cut -d":" -f2-
                output:
                  execRunOutput: stdout
              cloneRepo:
                action: execrun
                precedingPhases: [ getGitUri, getContext ]
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                      if [ -d $${{HOME}}/{$.name} ]; then rm -Rf {$.name};fi;
                      git clone `/usr/local/bin/rhc app-show -a {$.name} | grep "Git" | cut -d":" -f2-` $${{HOME}}/{$.name}
                      /usr/local/bin/rhc app-show -a {$.name} | grep "Git" | cut -d":" -f2-
                output:
                  execRunOutput2: stdout
              deployApp2:
                  action: execrun
                  precedingPhases: [ cloneRepo ]
                  parameters:
                    roles: [ compute ]
                    isSudo: false
                    command:
                    - bash -exc
                    - |
                        cd $${{HOME}}/{$.name}
                        rm -f pom.xml
                        rm -Rf src
                        rm -Rf webapps/*
                        wget -O webapps/ROOT.war {$.bucket_url_with_war}
                        wget -O .openshift/config/context.xml {$.bucket_url_with_context}
                        echo "{$.instanceId} `date`" > deployment
                        git add .
                        git commit -m "deployment " 
                        git push
                        rm -Rf $${{HOME}}/{$.name}
                  output:
                    execRunOutput3: stdout 
            return: ### Values returned from workflow
              status:
                value: "contextStringOne"
          delete-app: ### Additional workflow to delete application in OpenShift
            steps:
              deleteApp:
                action: execrun
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command: 
                  - bash -exc
                  - |
                       /usr/local/bin/rhc app-show {$.name} && /usr/local/bin/rhc app delete -a {$.name} --confirm  && rm -f $${{HOME}}/.openshift_service/{$.name};
                       if [ -d {$.name} ]; then rm -Rf {$.name};fi;
                output:
                  execRunOutput: stdout
            return: ### Values returned from workflow
              status:
                value: "Ok"
### Destory should delete all created application by this service
### Current implementation
### It should delete app in OpenShift 
### Source for the list of created application - filesystem. directory 
          destroy:
            steps:
              destroyApps:
                action: execrun
                parameters:
                  roles: [ compute ]
                  isSudo: false
                  command:
                  - bash -exc
                  - |
                       for appname in `ls $${{HOME}}/.openshift_service/`;
                       do /usr/local/bin/rhc app delete -a $${{appname}} --confirm;
                       done;
                output:
                  execRunOutput2: stdout

              destroyVMS:
                action: "destroyVms"
                precedingPhases: [ destroyApps ]
    envService:
      type: reference.Service
      interfaces:
        output:
          password_openshift: publish-signal(string)
          login_openshift: publish-signal(string)
          username_git: publish-signal(string)
          useremail_git: publish-signal(string)
          apihost_openshift: publish-signal(string)
  bindings:
  - [workflow#compute, compute]
  - [envService, workflow]

# NOTES:
# rhc not found thats is why full path was used 
# gem2.1 on some linux after you install gem
# many variables are hardcoded. deploy-app workflow
# variable name should be cleaned
# create app is not using few input parameters. should be cleaned up 
#
#what is working in current version:
#- Qubell OpenShift Service
#- - create app with a parameter name
#- - deploy app with a parameter name
#- - delete app with a http link on war and context
#- - launch initialize openshift command line tool
#- - destroy service deletes all create apps

#current limitations:
#- list of cartridges is static list in manifest of openshift service

